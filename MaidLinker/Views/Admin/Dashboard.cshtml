@model DashboardViewModel
@using MaidLinker.Data
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@{
    string cultureCode = System.Threading.Thread.CurrentThread.CurrentCulture.Name;
    string direction = cultureCode.StartsWith("ar", StringComparison.OrdinalIgnoreCase) ? "rtl" : "ltr";
    string textAlign = direction == "rtl" ? "right" : "left";
    bool isEng = cultureCode.StartsWith("en", StringComparison.OrdinalIgnoreCase) ? true : false;
    string closeButtonValue = isEng ? "0" : "1%";
}


<!-- #region Styles -->
<head>
    <link href="~/css/sb-admin-2.css" rel="stylesheet">
    <style>
        .scrollable-table tbody {
            display: block;
            max-height: 250px; /* ~ 5 rows */
            overflow-y: auto;
        }

            .scrollable-table thead,
            .scrollable-table tbody tr {
                display: table;
                width: 100%;
                table-layout: fixed;
            }
    </style>

</head>
<!-- #endregion -->
<div id="page-top" class="mt-5" style="direction:@direction">
    <div id="wrapper">
        @await Html.PartialAsync("_Sidebar")

        <div id="content-wrapper" class="d-flex flex-column">
            <div id="content" style="background-color:lavender">
                <div class="container-fluid mt-5">
                    <div class="d-sm-flex align-items-center justify-content-between mb-4">
                        <h6 class="h6 mb-0" style="font-weight:bold;color:#5F7AE7 "></h6>
                        @await Html.PartialAsync("_Userbar")
                    </div>

<div class="row">
    <div class="col-xl-12 col-lg-12">
        <div class="card shadow mb-4">
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0" style="font-weight:bold;color:#5F7AE7 ">@Localizer["MaidPageTitle"]</h6>
            </div>
        <div class="card-body">
    <!-- Replace this div in your current code -->
    <div class="table-responsive" id="dataTableContainer">
        <!-- New Requests Table -->
        @if (Model.NewRequests != null && Model.NewRequests.Any())
        {
        
                // Group requests by Maid Id or 0 if null
                var groupedRequests = Model.NewRequests
                    .GroupBy(r => r.Maid?.Id ?? 0)
                    .ToList();
            <table class="table table-bordered table-hover scrollable-table">
                <thead class="table-light">
                    <tr>
                        <th>@Localizer["Status"]</th>
                        <th>@Localizer["RequestNumber"]</th>
                        <th>@Localizer["VisitorName"]</th>
                        <th>@Localizer["VisitorNumber"]</th>
                        <th>@Localizer["MaidName"]</th>
                        <th>@Localizer["MaidNumber"]</th>
                        <th>@Localizer["Action"]</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var group in groupedRequests)
                    {
                        var requests = group.ToList();
                        var maid = requests.First().Maid;

                        if (requests.Count > 1)
                        {
                            <tr class="table-info">
                                <td colspan="7" style="font-weight:bold;">
                                    @Localizer["MultipleRequestsFor"] @maid?.FullName
                                    <span class="badge bg-info ml-1" title="@Localizer["MultipleRequestsForThisMaid"]">
                                        @requests.Count
                                    </span>
                                </td>
                            </tr>

                            foreach (var request in requests)
                            {
                                bool isTaken = !string.IsNullOrEmpty(request.ServedByUserId);
                                <tr>
                                    <td>
                                        @if (request.Status == MaidLinker.Enums.SharedEnum.RequestStatus.New)
                                        {
                                            <span class="badge bg-secondary text-dark">@Localizer["Pending"]</span>
                                        }
                                        else if (request.Status ==  MaidLinker.Enums.SharedEnum.RequestStatus.InProgress)
                                        {
                                            <span class="badge bg-warning text-dark">@Localizer["InProgress"]</span>
                                        }
                                        else if (request.Status == MaidLinker.Enums.SharedEnum.RequestStatus.Completed)
                                        {
                                            <span class="badge bg-success">@Localizer["Completed"]</span>
                                        }
                                    </td>
                                    <td>#@request.Id</td>
                                    <td>@request.Name</td>
                                    <td>@request.Phone</td>
                                    <td>@maid?.FullName</td>
                                    <td>@maid?.Id</td>
                                    <td>
                                        <!-- Only Cancel button shown when multiple requests -->
                                        <button class="btn btn-sm btn-danger cancel-request-btn" data-id="@request.Id" @(isTaken ? "disabled" : "")>
                                            @Localizer["Cancel"]
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            var request = requests.First();
                            bool isTaken = !string.IsNullOrEmpty(request.ServedByUserId);
                            <tr>
                                <td>
                                    @if (request.Status == MaidLinker.Enums.SharedEnum.RequestStatus.New)
                                    {
                                        <span class="badge bg-secondary text-dark">@Localizer["Pending"]</span>
                                    }
                                    else if (request.Status == MaidLinker.Enums.SharedEnum.RequestStatus.InProgress)
                                    {
                                        <span class="badge bg-warning text-dark">@Localizer["InProgress"]</span>
                                    }
                                    else if (request.Status == MaidLinker.Enums.SharedEnum.RequestStatus.Completed)
                                    {
                                        <span class="badge bg-success">@Localizer["Completed"]</span>
                                    }
                                </td>
                                <td>#@request.Id</td>
                                <td>@request.Name</td>
                                <td>@request.Phone</td>
                                <td>@maid?.FullName</td>
                                <td>@maid?.Id</td>
                                <td>
                                    <!-- Show Take Over if exactly one request -->
                                    <button class="btn btn-sm btn-success take-over-btn" data-id="@request.Id" @(isTaken ? "disabled" : "")>
                                        @Localizer["TakeOver"]
                                    </button>

                                    <!-- Cancel button always -->
                                    <button class="btn btn-sm btn-danger cancel-request-btn" data-id="@request.Id" @(isTaken ? "disabled" : "")>
                                        @Localizer["Cancel"]
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="text-center text-muted my-5">
                <i class="fas fa-inbox fa-2x text-primary"></i>
                <h5 class="mt-3">@Localizer["NoNewRequestsFound"]</h5>
            </div>
        }

        <!-- Request Status Summary -->
        <h5 class="mt-5 mb-3 text-primary" style="font-weight:bold;text-align:@textAlign">@Localizer["RequestStatusSummary"]</h5>
        <div class="row text-center" style="direction:@direction">
            <div class="col-md-4">
                <div class="card bg-secondary text-white mb-3 shadow-sm">
                    <div class="card-body">
                        <h6>@Localizer["NewRequests"]</h6>
                        <h3>@Model.StatusCounts.New</h3>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card bg-warning text-white mb-3 shadow-sm">
                    <div class="card-body">
                        <h6>@Localizer["InProgress"]</h6>
                        <h3>@Model.StatusCounts.InProgress</h3>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card bg-success text-white mb-3 shadow-sm">
                    <div class="card-body">
                        <h6>@Localizer["Completed"]</h6>
                        <h3>@Model.StatusCounts.Completed</h3>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.querySelectorAll('.cancel-request-btn').forEach(btn => {
            btn.addEventListener('click', function () {
                const requestId = this.getAttribute('data-id');
                if (confirm('@Localizer["ConfirmCancelRequest"]')) {
                    fetch(`/Requests/Cancel/${requestId}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' }
                    }).then(response => {
                        if (response.ok) {
                            showSuccessMessage();
                            location.reload();
                        } else {
                            showErrorMessage();
                        }
                    });
                }
            });
        });
    </script>
}



                    <div class="row">
                        <div class="col-xl-12 col-lg-12">
                            <div class="card shadow mb-4">
                                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                    <h6 class="m-0" style="font-weight:bold;color:#5F7AE7 ">@Localizer["MaidPageTitle"]</h6>
                                </div>
                                <div class="card-body">
                                    <!-- Replace this div in your current code -->
                                    @await Html.PartialAsync("_InProgressRequestsPartial", Model.InProgressRequests)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


  

    <a class="scroll-to-top rounded" href="#page-top"><i class="fas fa-angle-up"></i></a>
</div>


<script>
    $(document).ready(function () {
        $(".take-over-btn").click(function () {
            const btn = $(this);
            const requestId = btn.data("id");

            $.post("/Admin/TakeOverRequest", { id: requestId }, function (res) {
                if (res.success) {
                   showSuccessMessage();
                    setTimeout(() => location.reload(), 1000);
                } else {
                 showErrorMessage();
                }
            });
        });

          $(".cancel-request-btn").click(function () {
            const btn = $(this);
            const requestId = btn.data("id");

            $.post("/Admin/CancelRequest", { id: requestId }, function (res) {
                if (res.success) {
                   showSuccessMessage();
                    setTimeout(() => location.reload(), 1000);
                } else {
                      showErrorMessage();
                }
            });
        });
    });
</script>
