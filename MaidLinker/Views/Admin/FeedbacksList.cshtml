@model List<MaidLinker.Data.Entites.Feedback>

@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@{
    string cultureCode = System.Threading.Thread.CurrentThread.CurrentCulture.Name;
    string direction = cultureCode.StartsWith("ar", StringComparison.OrdinalIgnoreCase) ? "rtl" : "ltr";
    string textAlign = direction == "rtl" ? "right" : "left";
    bool isEng = cultureCode.StartsWith("en", StringComparison.OrdinalIgnoreCase) ? true : false;
    string closeButtonValue = isEng ? "0" : "1%";
}


@{
    var defaultPageSize = 5; // Default number of items per page
    var currentPage = Context.Request.Query["page"].ToString();
    if (string.IsNullOrEmpty(currentPage))
    {
        currentPage = "1";
    }

    var searchQuery = Context.Request.Query["search"].ToString().Trim();
    var filteredItems = string.IsNullOrEmpty(searchQuery) ? Model : Model.Where(p => p.Name.ToLower().Contains(searchQuery.ToLower()) || p.Name.ToLower().Contains(searchQuery.ToLower())).ToList();
    var totalItems = filteredItems.Count;

    var pageSizeParam = Context.Request.Query["pageSize"].ToString();
    var pageSize = string.IsNullOrEmpty(pageSizeParam) ? defaultPageSize : int.Parse(pageSizeParam);
    pageSize = Math.Max(1, Math.Min(pageSize, totalItems)); // Ensure the page size is within a valid range

    var totalPages = (int)Math.Ceiling((double)totalItems / pageSize);

    var startIndex = (int.Parse(currentPage) - 1) * pageSize;
    var endIndex = Math.Min(startIndex + pageSize - 1, totalItems - 1);

    var visibleItems = filteredItems.GetRange(startIndex, endIndex - startIndex + 1);
}

<div>
    <div class="row justify-content-start">
        <div class="col-md-6 d-flex justify-content-start">
            <form id="filterForm" method="get" class="d-flex flex-wrap align-items-center">
                <div class="form-group mr-2">
                    <input type="text" class="form-control" id="searchInput" name="search" placeholder="@Localizer["Search"]" value="@searchQuery">
                </div>

                <div class="form-group mr-2">
                    <button type="submit" class="btn btn-primary">@Localizer["Search"]</button>
                </div>
            </form>
        </div>

        <div class="col-md-6 d-flex justify-content-end">
            <form id="filterForm" method="get" class="d-flex flex-wrap align-items-center">
                <div class="form-group mr-2">
                    <input type="number" class="form-control" id="pageSizeInput" name="pageSize" min="1" max="@totalItems" value="@pageSize">
                </div>
                <div class="form-group mr-2">
                    <button type="submit" class="btn btn-primary">@Localizer["Apply"]</button>
                </div>
            </form>
        </div>
    </div>
</div>

<table class="table table-striped" id="dataTable-feedbacks" width="100%" cellspacing="0">
    <thead>
        <tr>
            <th>#</th>
            <th>@Localizer["Name"]</th>
            <th>@Localizer["Phone"]</th>
            <th>@Localizer["Email"]</th>
            <th>@Localizer["Message"]</th>
            <th>@Localizer["Seen"]</th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < visibleItems.Count; i++)
        {
            var feedbacks = visibleItems[i];
            <tr>
                <td>@feedbacks.Id</td>
                <td>@feedbacks.Name</td>
                <td>@feedbacks.Phone</td>
                <td>@feedbacks.Email</td>
                <td style="word-break: break-word; white-space: normal; max-width: 300px;">@feedbacks.Message</td>
                <td>
                    <div class="custom-control custom-switch">
                        <input type="checkbox" class="custom-control-input" id="statusToggle_@feedbacks.Id" @(feedbacks.StatusId == MaidLinker.Enums.SharedEnum.FeedbackStatusEnum.Seen ? "checked" : "") data-id="@feedbacks.Id">
                        <label class="custom-control-label" for="statusToggle_@feedbacks.Id"></label>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="modal fade" id="EditUserServices" tabindex="-1" role="dialog" aria-labelledby="EditUserServicesModal" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="EditUserServicesModal">@Localizer["Edit"]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label style="font-weight:bold;color:#5F7AE7" for="titleEnInputEdit">@Localizer["TitleEnglish"]</label>
                        <input type="text" class="form-control" id="titleEnInputEdit" required>
                    </div>
                    <div class="form-group">
                        <input hidden type="text" class="form-control" id="titleId">
                        <label style="font-weight:bold;color:#5F7AE7" for="titleArInputEdit">@Localizer["TitleArabic"]</label>
                        <input type="text" class="form-control" id="titleArInputEdit" required>
                    </div>
                </form>
                <div class="alert alert-danger hidden sm" role="alert">
                    <span id="error-msg"></span>
                </div>
            </div>
            <div class="modal-footer">
                <button id="close-edit-UserServices" type="button" class="btn btn-danger" data-dismiss="modal">@Localizer["Cancel"]</button>
                <button id="edit-UserServices" type="button" class="btn btn-success" style="background-color:#5F7AE7">@Localizer["Update"]</button>
            </div>
        </div>
    </div>
</div>

@if (totalItems == 0)
{
    <div style="text-align:center">
        <label style="font-weight:bold">@Localizer["NoResultsFound"]</label>
        <img src="~/icon/no-result-found-icon.png" width="25" height="25" /> <span style="color:black"></span>
    </div>
}

<div style="text-align:center">
    <ul class="pagination">
        @for (int i = 1; i <= totalPages; i++)
        {
            <li class="page-item @(i == int.Parse(currentPage) ? "active" : "")">
                <a class="page-link" href="?page=@i&search=@searchQuery&pageSize=@pageSize">@i</a>
            </li>
        }
    </ul>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    $(document).ready(function () {
        $('.custom-control-input').on('change', function () {
            var isChecked = $(this).is(':checked');
            var feedbacksId = $(this).data('id');
            updateStatus(feedbacksId, isChecked);
        });
    });

    function rejectService(feedbacksId){
        var reason = $('#rejectionReason').val();
        $.ajax({
            url: '/Admin/RejectDashboardfeedbacks?id=' + feedbacksId + '&rejectionReason=' + reason,
            type: 'GET',
            data: null,
            success: function (response) {
                location.reload();
            },
            error: function (error) {
            }
        });
    }

    function updateStatus(feedbacksId, isChecked) {
        $.ajax({
            url: '/Admin/UpdatefeedbacksStatus/' + feedbacksId + '/' + isChecked,
            type: 'GET',
            data: { isActive: isChecked },
            success: function (response) {
                $('.alert-success').removeClass('hidden').hide().fadeIn();
                setTimeout(function () {
                    $('.alert-success').fadeOut();
                }, 3000);
            },
            error: function (error) {
            }
        });
    }

    function getfeedbacks(id) {
        $.ajax({
            url: '/Admin/Getfeedbacks/' + id,
            type: 'GET',
            success: function (data) {
                $('#titleArInputEdit').val(data.titleAr);
                $('#titleEnInputEdit').val(data.titleEn);
                $('#titleId').val(data.id);
            },
            error: function (error) {
                console.log(error);
            }
        });
    }

    $('#edit-feedbacks').click(function () {
        var feedbacks = {
            TitleAr: $('#titleArInputEdit').val(),
            TitleEn: $('#titleEnInputEdit').val(),
            Id: $('#titleId').val(),
        };

        $.ajax({
            url: '/Admin/Updatefeedbacks',
            type: 'POST',
            data: JSON.stringify(feedbacks),
            contentType: 'application/json',
            success: function (response) {
                $('.alert-success').removeClass('hidden').hide().fadeIn();
                $('#close-edit-feedbacks').trigger('click');
                $('#dataTableContainer').load('/Admin/Getfeedbacks');

                setTimeout(function () {
                    $('.alert-success').fadeOut();
                }, 3000);

            },
            error: function (xhr, status, error) {
                $('.alert-danger').removeClass('hidden');
                var msg = xhr.responseText;
                $('#error-msg-add').text(msg.toString());

                setTimeout(function () {
                    $('.alert-danger').addClass('hidden');
                }, 5000);
            }
        });
    });
</script>
